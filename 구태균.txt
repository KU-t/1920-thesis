이름     학번      email주소      핸드폰번호
----------------------------------------------
구태균  2014132002   jhltk2426@naver.com    010.7559.2426


2019-11-26
------------
1. 지도교수 변경 : 이용희 -> 정내훈
 - 졸업을 논문으로 할 예정
 - 멀티쓰레드 프로그래밍 관련 토픽으로 졸업 희망

2. 일단 주제를 lock free shared_ptr의 구현으로 잡음.
 - 이슈 : 현재의 shared_ptr는 멀티쓰레드 safe하지 않음
 - 목표 : Lock Free shared_ptr의 구현
 - 어려움 : shared_ptr와 weak_ptr의 연동이 lock free로 이루어져야 함.

3. 다음 미팅
 - shared_ptr와 weak_ptr가 무엇인지 공부하기
 - "멀티스레딩과 shared_ptr의 충돌 해결"를 보고 무엇을 해야 하는지 이해 하기
 - 2019-11-28일 목요일 오후 8시까지 위의 내용을 공부해 올것. 이후 발표자료 제작.

2019-11-28
------------
1. weak_ptr 란? 이해를 못하고 있음.

2. 12월 6일까지 PPT 제출

3. 12월 30일에 발표.

4. PPT작성
 -  서론(what?), 동기(why?), 배경 (shared_ptr, weak_ptr, lock_free), 관련연구(so far), 연구 방법(how?), 일정(when?)
     합해서  10페이지 정도.

5. 다음 미팅
 -  12월 2일 월요일 저녁 8시
 - PPT작성해 오기
 - GITHUB 프로젝트 하나 생성하기, 그리고 zzapuno@hotmail.com을 초대하기.


2019-12-02
-------------
1. PPT를 읽어서 이해가 될 수 있도록 하고, 자신이 발표할 수 있도록 내용을 다듬을 것.
 - 관련연구를 좀 자세히 적을 것.

2. 다음 미팅
 - 12월 16일 월요일 오후 7시
 - 관련연구를 읽어와서 발표하기. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.8221&rep=rep1&type=pdf

2019-12-16
-------------
1. 관련연구를 읽어와서 발표하기. Practical and Efﬁcient Lock-Free Garbage Collection Based on Reference Counting

2. 다음미팅 : 12월 26일 목요일 오후 5시
 - 12월 30일 발표자료 업데이트해서 가져올 것
 - 발표 예행 연습 예정 

2019-12-26
------------
1.  발표 자료 수정
 * 중복된 내용 제거
 * Example Code 추가
 * 설명의 간략화

2. 다음미팅 : 
 *  1월 13일 오후 2시
 * 연구한 내용 발표.(G++에서의 shared_ptr, weak_ptr 소스코드 분석내용)

2019-01-13
-------------
1. 제안서 발표 - 통과
 * 딱히 특별한 지적 사항은 없었음.

2. 작업일지 작성 시작
 * 샘플 서식에 맞춰서 매주 작성

3. 오늘 한것
 * using a = b;
   typedef b a; 와 같다. 그런데 좀더 템플릿에서 사용하기 편하다.

   typedef int a[100];
   using a = int[100];

 * remove_extent<T>::type;
   T가 배열이면 배열의 원소 타입을 리턴한다.
   type은 remove_extent 템플릿의 멤버의 이름이다.

 * enable_shared_from_this
   shared_ptr로 관리되는 객체가 내부에서 자기 자신의 shared_ptr를 얻고자 할 때 사용. 이게 없으면 자신의 shared_ptr가 무엇인지 내부에서 알 방법이 없다.

#include <iostream>
#include <memory>

class party;

class player
{
public:
	int id;
	std::shared_ptr<party> my_party;
	player(int id_): id (id_)
	{}
};


class party : public std::enable_shared_from_this<party>
{

	std::shared_ptr<player> member[5];
public:
	void add_memeber(std::shared_ptr<player> new_member)
	{
		member[0] = new_member;
		new_member->my_party = shared_from_this();
	}
};


int main()
{
	std::shared_ptr<player> p1 = std::make_shared<player>(1);
	std::shared_ptr<party> pt1 = std::make_shared<party>();
	pt1->add_memeber(p1);
}

4. 인터넷을 뒤져가면서 잘 공부해 올것.
 
5. 다음미팅
 - 2월 3일 오후 2시
