이름     학번      email주소      핸드폰번호
----------------------------------------------
구태균  2014132002   jhltk2426@naver.com    010.7559.2426


2019-11-26
------------
1. 지도교수 변경 : 이용희 -> 정내훈
 - 졸업을 논문으로 할 예정
 - 멀티쓰레드 프로그래밍 관련 토픽으로 졸업 희망

2. 일단 주제를 lock free shared_ptr의 구현으로 잡음.
 - 이슈 : 현재의 shared_ptr는 멀티쓰레드 safe하지 않음
 - 목표 : Lock Free shared_ptr의 구현
 - 어려움 : shared_ptr와 weak_ptr의 연동이 lock free로 이루어져야 함.

3. 다음 미팅
 - shared_ptr와 weak_ptr가 무엇인지 공부하기
 - "멀티스레딩과 shared_ptr의 충돌 해결"를 보고 무엇을 해야 하는지 이해 하기
 - 2019-11-28일 목요일 오후 8시까지 위의 내용을 공부해 올것. 이후 발표자료 제작.

2019-11-28
------------
1. weak_ptr 란? 이해를 못하고 있음.

2. 12월 6일까지 PPT 제출

3. 12월 30일에 발표.

4. PPT작성
 -  서론(what?), 동기(why?), 배경 (shared_ptr, weak_ptr, lock_free), 관련연구(so far), 연구 방법(how?), 일정(when?)
     합해서  10페이지 정도.

5. 다음 미팅
 -  12월 2일 월요일 저녁 8시
 - PPT작성해 오기
 - GITHUB 프로젝트 하나 생성하기, 그리고 zzapuno@hotmail.com을 초대하기.


2019-12-02
-------------
1. PPT를 읽어서 이해가 될 수 있도록 하고, 자신이 발표할 수 있도록 내용을 다듬을 것.
 - 관련연구를 좀 자세히 적을 것.

2. 다음 미팅
 - 12월 16일 월요일 오후 7시
 - 관련연구를 읽어와서 발표하기. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.8221&rep=rep1&type=pdf

2019-12-16
-------------
1. 관련연구를 읽어와서 발표하기. Practical and Efﬁcient Lock-Free Garbage Collection Based on Reference Counting

2. 다음미팅 : 12월 26일 목요일 오후 5시
 - 12월 30일 발표자료 업데이트해서 가져올 것
 - 발표 예행 연습 예정 

2019-12-26
------------
1.  발표 자료 수정
 * 중복된 내용 제거
 * Example Code 추가
 * 설명의 간략화

2. 다음미팅 : 
 *  1월 13일 오후 2시
 * 연구한 내용 발표.(G++에서의 shared_ptr, weak_ptr 소스코드 분석내용)

2019-01-13
-------------
1. 제안서 발표 - 통과
 * 딱히 특별한 지적 사항은 없었음.

2. 작업일지 작성 시작
 * 샘플 서식에 맞춰서 매주 작성

3. 오늘 한것
 * using a = b;
   typedef b a; 와 같다. 그런데 좀더 템플릿에서 사용하기 편하다.

   typedef int a[100];
   using a = int[100];

 * remove_extent<T>::type;
   T가 배열이면 배열의 원소 타입을 리턴한다.
   type은 remove_extent 템플릿의 멤버의 이름이다.

 * enable_shared_from_this
   shared_ptr로 관리되는 객체가 내부에서 자기 자신의 shared_ptr를 얻고자 할 때 사용. 이게 없으면 자신의 shared_ptr가 무엇인지 내부에서 알 방법이 없다.

#include <iostream>
#include <memory>

class party;

class player
{
public:
	int id;
	std::shared_ptr<party> my_party;
	player(int id_): id (id_)
	{}
};


class party : public std::enable_shared_from_this<party>
{

	std::shared_ptr<player> member[5];
public:
	void add_memeber(std::shared_ptr<player> new_member)
	{
		member[0] = new_member;
		new_member->my_party = shared_from_this();
	}
};


int main()
{
	std::shared_ptr<player> p1 = std::make_shared<player>(1);
	std::shared_ptr<party> pt1 = std::make_shared<party>();
	pt1->add_memeber(p1);
}

4. 인터넷을 뒤져가면서 잘 공부해 올것.
 
5. 다음미팅
 - 2월 3일 오후 2시

2020-02-10
------------
1. 진행상황
 - shared_ptr 동작 분석
  * gcc쪽에 낮선 것들이 많이 보인다.

2. 낮선 것들
 - atomic_thread_fence(memory_order_acquire);
  * Out-of-order 실행으로 인한 메모리 접근순서 변경을 막는 명령어
  * _asm mfence와 같은 것
  * 하지만 mfence에는 여러 종류가 있다. (https://en.cppreference.com/w/cpp/atomic/memory_order)
    memory_order_relaxed : 실행순서 아무 상관 없음
    memory_order_consume : 더이상  안쓰임 
    memory_order_acquire : Lock에 해당하는 동기화, 동기화 이후에 있는 atomic연산들은 acquire가 끝난후 실행
    memory_order_release, : Unlock에 해당하는 동기화, 동기화 이전에 있는 atomic연산들이 모두 실행된 후 release실행
    memory_order_acq_rel : acquire와 release를 합한것. seq_cst와 
        다른 점은 서로다른 메모리에 접근하는 경우 쓰레드마다 순서가 다르게 보일 수 있다.
    memory_order_seq_cst  :  기본이고, 앞뒤의 모든 atomic operation의 실행순서를 분리. seq_cst가 적용된 메모리 접근은 모든 쓰레드에서 
       같은 순서로 실행된 것으로 보인다.

잘못된 코드 
  Thread A {
   int *data = &my_data;
   data_ready = true;
 }

 Thread B {
    if (true == data_ready) 
      cout << data;
 }

잘못된 코드 수정
  Thread A {
   int *data = &my_data;
   atomic_thread_fence(memory_order_release);
   data_ready = true;
 }

 Thread B {
    if (true == data_ready) {
    atomic_thread_fence(memory_order_acquire);
      cout << data;
   }
 }
   

 - GCC의 구현이 너무 양이 많다. 줄이자
  * Lock Policy중 single과 mutex를 없애는 것이 좋겠다.

 - EBO는 무엇인가?? Empty Based Optimization
  * 이런것 까지 신경 쓰지 않아도 좋을 듯

 - 별도의 deleter 적용 API들도 필요 없어 보임.

 - 꼭 필요한 핵심을 정의하고 그것만 구현하는 것이 필요
  * 일반 프로그램에서 많이 사용하는 것들
  * make_shared, shared_ptr<>, weak_ptr<>


3. 다음 미팅
 - GCC shared_ptr 분석
  * 호환성이나 확장성, 예외처리 부분을 제외한 핵심부분 분석
  * _Lock_policy와 deleter  삭제 (_Lock_policy는 atomic만 남김)
  * 구현이 필요한 method 분석
    - 생성자, Copy, Move, 소멸자
    - enable_shared_from_this는 나중에
 - 2월 26일 수요일 오후 4시


2020-03-09
------------
1. 진행상황
 - GCC에 있는 shared_ptr 소스코드를 Visual Studio에서 실행하려고 하는데 자꾸 컴파일에러가 난다.
  => 소스코드가 읽기 어려운 template programming방식이어서 이해하기가 너무 어렵다.

2. 대책
 - GCC에 있는 방대한 소스의 컴파일 버그를 찾으려는 노력보다는, 간단하게 shared_ptr를 구현하고 부족한 기능을 하나하나 추가해본다.
  필요한 기능을 추가하다가 보면 왜 Gcc 소스코드가 그렇게 되어 있는지 이해하게되고, 결국 GCC소스와 거의 같아지게 될 것이다.
 - 구현 단계
  * 생성자
  * = operator
  * 소멸자
  * atomic reference counting
  * get
  * * operator
  * -> operator
  * use_count
  * bool operator
  * make_shared
  * == operator
  * atomic_load
  * atomic_store
  * enable_shared_from_this

3. 다음 미팅
 - 3월 23일 월요일 오후 2시
 - 위의 구현단계에 적힌 것들을 구현해 오기.
 
2020-03-30
------------
1. 진행상황
 - 구현
  * shared_ptr다 구현
  * make_shared 구현
  * atomic_load, atomic_stre미구현
   => reference counter옆에 mutex를 두어서 그것으로 atomic구현
  * enable_shared_from_this는 VS구현이 너무 보기 힘들다.
 - 테스트프로그램
  * weak_ptr 구현
    => lock() 미구현

2. 다음미팅
 - enable shared from this 구현
 - 구현이 되면 Blcking Atomic Shared Pointer구현
 - 다음 미팅 4월 13일 (2시)

2020-04-13
-------------
1. 연구일지 매주 작성 필요

2. enable shared from this다음주 까지 구현
 - 기존의 구현이 복잡하고 생소한 요소들이 많기 때문에, 동작을 이해하고 차근차근 구현하는 것이 필요

3. 다음 미팅
 4월 20일 월요일 오후 2시 학교에서  (대면 수업 허가를 학교로 부터 받음)

2020-04-20
------------
1. 구태균 결석 : 몸이 아파서 결석, 가능하면 병결 출석인정원을 제출할 것

2. 연구일지 매주 작성 필요

3. 다음 미팅
 4월 27일 월요일 오후 2시 학교

2020-04-27
------------
1. 5월 11일 중간발표
 - 발표형식 미정 : 동영상 제출, 학교에서 한팀씩 들어와서 발표, 지도교수 판단.....

2. 진행상황
 - Blocking shared pointer 구현 : shared_ptr, make_shared, weak_ptr, enable_shared_from_this
 - 기본 데이터 Type에서 enable_shared_from_this가 안됨. => 구태균의 착각 기본데이터 타입에 enable_shared_from_this는 붙지 않는다.

    shared_ptr <int> sp_a = make_shared(int(1));
    shared_ptr <int> sp_b = sp_a;
    weak_ptr <int> wp_a = sp_a;
    weak_ptr <int> wp_b = wp_a;

 - 현재 주화입마에 빠져서 기본데이터의 ref_counter가 증가하지 않는 버그가 있는데, 수정할 것.
 - 컴파일 되면 안되는 오류코드가 컴파일됨 => 컴파일 에러를 내는 저주의 문장을 추가할 필요가 있음.

3. 중간 발표 준비
  ~ 4월 27일   : Blocking shared pointer 구현 : shared_ptr, make_shared, weak_ptr, enable_shared_from_this
  ~ 5월 4일    :  오류 수정, 발표자료 작성
  ~ 5월 11일   :  발표 준비.

4. 논문 제출 준비
 - 정보과학회 : 비슷한 짝퉁 학회들이 여러곳 있음.
 - 게임 학회 : 한국게임학회 (Korea Academic Society of Games), Journal of The Korean Society for Computer Game (KSCG), 
 - 일단은 학국게임확회를 목표로 작성하자 : 10월달까지 게제 여부가 결정되는 논문지의 제출 DeadLine알아보기..
    * 10월20일 게제이며, 제출 DeadLine은 9월 10일이다.

5.다음 미팅
 - 5월 4일 월요일 오후 2시 : 발표자료 작성, 벤치마크 프로그램을 작성해서 성능비교 해오기(std::shared_ptr와 비교)

        	std::atomic<std::shared_ptr<int>> a = std::make_shared<int> (10 );
	std::atomic<std::shared_ptr<int>> b = a.load();

6. 과제 수행 : 졸업할 때 까지. 80만원??? 5월이전에 결말.

2020-05-04
------------
1. 5월11일 중간발표
 - 지도교수 판단으로 넘김

2. 진행상황
 - Blocikingshared pointer구현: Release 모드에서 오류
 - 당연히 구현에 오류가 있는 것이고, cout으로 정보를 출력하면서 디버깅 해야 한다.

3. 다음 미팅
 - 5월 11일 월요일 7시


2020-05-11
-------------
1. 기획서 승인이 필요한데 통합정보시스템에서 구태균이 나오지 않음
 - 과사무실에 문의 했음.

2. 진행상황
 - Blocikingshared pointer구현: Release 모드에서 오류 => 수정
  * enable_shared_from_this에서 상속받은 객체의 경우 컨트롤 블럭을 2번 삭제하는 오류가 있었는데, 예외처리로 오류가 나오지 않도록 함.
  * 뜬금없이 control block이 생성되는 버그는 버그가 아니라 feature였음.
 - 모든 테스트 프로그램이 문제없이 실행?
  * NO : const reference로 매개변수를 넘겨 줄 때 컴파일 에러
   - 선언에 constexpr을 넣고 const 메소드들을 추가로 정의해 주어야 한다.
 - 런타임 에러 : head = nullptr에서 오류
  * nullptr_t를 매개변수로 받는 operator=를 정의해야 한다.
 - 런타임 에러 : 
       shared_ptr& operator=(const shared_ptr& other)
  * 위의 메소드에서 에러가 나는데, Data Race때문에 에러가 난다. Data Race를 잡도록, Lock의 보호 밖에서 수행되는 모든 operation은 위험하다!!!!!
   			if (curr_ctr) {
				if (false == curr_ctr->release())  // release에서 destory되면 false를 리턴
					curr_ctr->unlock();
			}
  * 위와 같은 방식으로 수정 필요.

3. 다음 미팅
 - 5월 18일 월요일 7시
 - 벤치마크프로그램이 실행될 때 까지 디버깅 해 올것.

2020-05-14
------------
1. 버그 수정
 - 싱글 쓰레드에서는 잘 돌아가는데 멀티쓰레드에서 오류가 난다.
 - 원인 : Contol Block에 있는 Lock으로 상호배제를 하고 있는데, 이것은 다시말하면 Control Block이 존재하지 않으면 상호배제를 하지 않는 다는 이야기이다.
   Thread A :   sp_a = nullptr;  sp_a = sp_b;
   Thread B :   sp_a = sp_c;
  위와 같은 코드에서 sp_a에 sp_b와 sp_c가 assign되는 것이 상호 배제 없이 동시에 실행되면서 Data Race가 발생하면서 오작동 한다.
 - 해결 방법 : shard_ptr 클래스에 mutex를 멤버로 두고 콘트롤 블록 존재 유무에 관계없이 모든 메소드에서 그 mutex로 상호 배제 하면서 동작해야 한다.

2. 과제 수행 (수익이 있는 곳에 일이 있다.)
 - 첫째 작업 : 자료 변환
  * 지하철을 운행하는 승무원의 운행스케줄 도표를 엑셀 표로 변환 


   예) 1번 승무원이 6시27분에 출근해서 
       왕십리 에서 열차를 07시에 타서 군자역에 07:25 도착  
       군자에서 10시 19분에 타서 고기역에 10:42분 도착
       고기역에서 16:42분에 타서 상일역에 16:47분 도착
       강동역에서 16:56분에 타서 답십리역에 17:51분 도착
       18:21분 퇴근
 - 월요일 미팅까지 해올것
 - 국가 2급 비밀이니 유출하지 말것.



2020-05-18
------------
1. 진행상황
 - mutex를 shared_ptr 클래스에 설치 ->잘 실행됨.
 - 성능? 멀티쓰레드일 때 std::shared_ptr를 atomic하게 사용한 것보다 성능이 좋음.
 
 - operator= 구현에서 임시 포인터 curr를 사용했는데 성능 저하???  => Release모드로 컴파일하면 컴파일러가 알아서 최적화 하므로 문제 없음
 - destructor()에서도 lock을 걸어야하는가? => reference counter를 감소 시킨 후 access하는 코드가 없어야 한다. 
                   그럴 경우 필요없다. destructor()는 싱글 스레드에서만 호출 된다.

2. Lock Free구현을 할 차례
 - Lock Free 구현의 필요성 : https://www.justsoftwaresolutions.co.uk/threading/why-do-we-need-atomic_shared_ptr.html
 - Lock Free Shared Pointer 구현 논문 : https://pdfs.semanticscholar.org/80d2/3837377503c3343e4117f5069fba816faac7.pdf

3. 다음 미팅
- 2번의 blog와 논문을 읽고 내용을 발표할 것.

4. 과제 수행
 - 다음주 월요일 까지 답십리 자료 입력해올것.

2020-05-25
------------
1. 진행상황
 - https://pdfs.semanticscholar.org/80d2/3837377503c3343e4117f5069fba816faac7.pdf 가 shared_ptr에 대한 논문이 아니라,  링크로 연결된 노드들로 이루어진
  자료구조에서 ref_counting으로 메모리 재상용문제를 해결하는 논문

2. 읽어 볼것
 - Lock Free 구현의 필요성 : https://www.justsoftwaresolutions.co.uk/threading/why-do-we-need-atomic_shared_ptr.html

3. Shared_ptr을 lock free로 어떻게 구현할지 고민 해 볼것
 - Lock Free로 구현하는 것이 어떠한 이유로 어려운지. 장애물들을 찾아서 적어 볼것

4. 다음 미팅
 2를 일고 3번을 고민한 내용을 이야기 할 것

5. 과제 수행
 - 다음주 월요일 까지 답십리 자료 입력해 올것.

2020-06-01
-------------
1. 진행상황
 - PPT에 적어온 내용은  shared_ptr <atomic_int> 
      shared_ptr<atomic_int> HP = make_shared<(int) 1>;
     ++(*HP);               // atomic wait-free operation
 - 원래 논문으로 구현하라고 했던 것
   atomic_shared_ptr <T> AHP
   atomic_ahred_ptr <T> TEMP_HP = AHP;   // 이 것이 atomic lock free로 실행되는 atomic_shared_ptr의 구현이 목표이다.
 - 지금까지 mutex를 넣어서 멀티쓰레드에서 잘 돌아가는 atomic_shared_ptr를 만들었는데 이제 mutex를 빼고 lock-free로 다시 구현하면 된다.

2. Shared_ptr을 lock free로 어떻게 구현할지 이번에는 제대로 고민 해 볼것
 - Lock Free로 구현하는 것이 어떠한 이유로 어려운지. 장애물들을 찾아서 적어 볼것

3. 과제 수행
 - 한달에 40만원씩 3,4,5월이 입금 됨
 - 이번에는 영등포 사업소 입력할 것.
 - 답십리 사업소 출력물에 출근시간이 생략되어 있음
 - 열차번호와 시간이 겹쳐서 인쇄되어서 알아보기 힘든 것들이 있음.
 - .xlsx로 출력해야 노란색으로 표시된 것이 남아 있음.

4. 벤치마크 프로그램 후보
 - 멀티코어 수업시간에 했던 Lazy-List
 - 게임서버를 작성해서 성능비교

4. 다음 미팅
 - 엉뚱한 것 하지말고, atomic_shared_ptr를 Lock Free로 어떻게 구현할지 고민해 오기

2020-06-08
------------
1. 진행상황
   shared_ptr(const shared_ptr& other)
   {
	ctr* new_ctr;
	while(true){
		new_ctr = other.ctr;
		if(new_ctr == nullptr) 	{ctr = nullptr; return;}
		new_ctr->add_ref_copy();

 - 위의 구현은 오류
   other.ctr을 new_ctr에 복사한 후 other.ctr이 delete되면 new_ctr->add_ref_copy()가 delete된 ctr에서 실행된다.
  
 - Refcount증가와 Copy를 동시에 할 수 있는 방법이 필요하다! 아이디어?????

2. 일주일을 더 고민해보자.

     shared_ptr(const shared_ptr& other)
     {
      ctr *new_ctr = other.add_ref_copy();
     }

ctr*    shared_ptr::add_ref_copy()
    { 
      ctr *tmp_ptr;
      do {
          ctr *tmp2 = ctr;
          if (nullptr == tmp2) return nullptr;
          tmp_ptr = tmp2->add_ref_copy();
      } while (nullptr == tmp_ptr);
      return tmp_ptr;
    }


ctr*   ctr::add_ref_copy()
   {
     while (true) {
        int temp = ref_count;
        if (temp > 0) {
            if (true == CAS(&ref_count, temp, temp + 1) return this;
           else continue;
        }
        else return nullptr;
        }
   }

  이 코드는 괜찮은가???

3. 다음 주 미팅
 - 좀더 고민해 올것.
 - 6월 18일 목요일 오후 1시 30분으로 시간 이동

4. 과제 : 7호선 대공원 사업소 입력.


2020-06-18
-------------
1. shared_ptr에서 Get의 구현
 - get은 private니까 구현하지 않아도 된다.

2. atomic의 정의가 무엇인가?
 - Operation의 시작에서 끝까지 다른 Operation에 영향을 받지 않는 것.

3. Release
 Void control_block::release()
{
	Int count;
	While(true){
		Count = ref_count;
		If(true == CAS(&ref_count,count,count-1))
		{
			If(0 == count)
				Destroy(…);
			Return;
		}
}
}


void atomic_shared_ptr::release()
{
       auto t_ctr = ctr;
       if (nullptr != t_ctr) 
           t_ctr->release();
}

4. 코드를 만들어서 테스트 해 본다음에 물어 볼것.

5. 다음 미팅 6월 25일 오후 1시 30분

2020-06-25
------------
1. Atomic Shared Pointer 구현. 
 - 벤치마크 수행
  * atomic_load/store 보다는 성능이 좋음
  * mutex로 구현된 atomic_shared_ptr보다는 성능이 좀 떨어짐
 - 코어가 많은 컴퓨터에서 실행해 보자.  LINUX에서 컴파일이 안된다.
  * LINUX에서도 컴파일이 되도록 수정할 것
  * 리눅스 접속은 ssh ktk@210.93.61.41 
  * putty에서 210.93.61.41에 포트번호 23번으로 접속
  * Windows 10을 사용하면 WSL2를 사용하던가 hyper5 가상머신으로 설치해서 사용하던가.

2. 지금까지 테스트한 것
 - 생성자, 소멸자, operator =, operator ->, make_shared

3. 테스트가 필요한 것
 - enable_shared_from_this, weak_ptr, atomic_compare_exchange
 - 위의 것들를 테스트 할 수 있는 벤치마크 프로그램 만들기(또는 찾아 보기)

4. Correctenss에 대한 설명 작성하기 (증명까지 하면 좋음) 교과서 198페이지 참조
 - 왜 Lock Free인가?
 - 왜 오류가 없이 동작하는가??

5. 다음 미팅
 - LINUX동작 가능하게 수정
 - 동작 증명 초안.

2020-07-02
-------------
1. 진행 상황
 - LINUX 수정 중 문제발생 => 계속 수정 할 것
 - 중요 연산자의 동작 정리
 

2. ToDo
 - enable_shared_from_this, weak_ptr, atomic_compare_exchange
   * 위의 것들를 테스트 할 수 있는 벤치마크 프로그램 만들기(또는 찾아 보기)
 - LINUX 동작 가능하게 수정하기
 - 동작을 정리한 것을 가지고 증명을 시도해 보기.

2020-07-15
------------
1. 진행상황
 - Linux문제 수정 
 * 실행시 오류. Core Dump => Visual Studio에서는 잘 돌아감.
  - 보통 문제가 되는 것이. VS에서는 long이 32비트, Linux에서는 long이 64비트
  - 그래서 강제 캐스팅 ()을 사용하면 이 오류가 걸러지지 않기 때문에 강제 캐스팅을 쓰면 안된다.
  - 수정 결과 처음부터 오류가 났었는데, 그 오류는 사라지고 다른 곳에서 Crash.
 * 그런데, Linux에서만 죽는 것이 아니고 VS에서도 죽는다.
 * Debugging 필요

 - 중요 연산자의 동작 정리
 * 정리했음 -> 그러나 SWAP의 구현이 어려움

2. 다음 미팅
 - Linux 디버깅 해 볼것
 - 7월 20일 월요일 오후 1시 30분

2020-07-22
-------------
1. 진행상황
 - 실행오류 수정 (리눅스에서도 잘 동작함)
  * 
 - Swap과 Owner_before 구현을 못함.
  * owner_before는 두개의 shared_pointer의 순서를 알아내는 함수
   - 원래 두개의 shared_pointer를 비교할 수 있고 그 비교는 객체의 주소를 갖고 이루어진다.
   - 하지만 두개의 shared_pinter가 같은 control_block을 갖지만 객체의 주소는 다를 수 있다!!!!!  (매우 비정상적인 경우이고, destruct될 때 메모리가 꼬일수 있다.)
         원래 shared_pointer는 두개의 member가 있다 하나는 객체주소, 하나는 control_block주소.
         auto t = make_shared<int>(1);
         int a = 2;
         auto t1 = shared_ptr<int>(t, &a);
            => t와 t1은 같은 control_block을 가지나 서로 다른 객체를 pointing한다.

   - 그럴경우 그냥 비교를 하면 두 shared_pointer가 같은 control_block을 갖지만 서로 다른 shared_pointer라고 판정이된다.
   - 이럴때 owner_before로 비교하면 객체의 주소가 아니고 control_block의 주소를 비교하므로 같은 shared_pointer라고 판정할 수 있다.

2. 논문 작성
 - 한국게임학회논문지에 논문들을 참조해서 작성하도록.

3. 논문 게재
- 정보과학회논문지 (8월학회 이후 일정이 없음, 매달 논문지 출간)
- 한국게임학회논문지  (짝수달 마다 간행, 1달전에 마감)   ============> 9월 15일까지 제출해서 10월에 실리도록 하자.  7월은 11에 마감되었음.
- 한국컴퓨터게임학회논문지 <간행물 < KISS   (분기마다 간행, 마감은 불확실)

4. 다음 미팅 (7월 29일 수요일 1시 30분)
 - 논문 써서 오기
  * 벤치마크프로그램이 포함 되어야 한다.
   - weak_ptr 벤치마크도 작성, atomic_compare_exchange도 작성(shared_ptr를 사용해서 lock-free 자료구조를 만들 때 사용)
 - 8월 10일 발표 PPT?????????  논문 쓰는 팀은 그 때 발표하지 않는데???? -----------> 알아봐야 겠다.
 - 관련연구
  * Lock-free에 대한 것 : 교과서
  * bechmark 프로그램 : 교과서
  * shared_ptr에 대한 것 : The C++ Programming Language (Fourth Edition)
  * Lock Free 구현의 필요성 : https://www.justsoftwaresolutions.co.uk/threading/why-do-we-need-atomic_shared_ptr.html
  * Lock Free Shared Pointer 구현 논문 : https://pdfs.semanticscholar.org/80d2/3837377503c3343e4117f5069fba816faac7.pdf

5. 새로운 과제 참여
 - 매월 50만원 (6개월, 5월 - 10월)
 - 연구자등록번호 알아오기
 - 과제비 지급 서류 작성해 오기.

2020-07-29
-------------
1. 진행 상황
 - 논문 미완성 : 서론과 shared_ptr 설명 밖에 없음.
 - PPT : 구현 내용 및 벤치마킹 결과 추가

2. 관련연구에 http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4162.pdf 추가
 - atomic_shared_ptr의 대한 표준안이면 여기에서도 (owner_before와 swap이 제거된 것을 볼 수 있다.)

3. 관련과제
 - 연구자등록번호 : 12619003

4. 다음 미팅
 - 8월 5일 수요일 오후 1시 30분
 - PPT 완성해오기
 - 논문 추가 작성

2020-08-05
-------------
1. 진행상황
 - 최종 발표일에 PPT가 아니라 포스터로 발표

2. 포스터 수정
 - 수정한 내용을 좀 이쁘게 다듬을 것
 - 좀더 좋은 표현이 있다면, 수정할 것.

3. 논문 수정
 - 이미 교과서나 다른 논문에 실린 내용을 설명하면 안된다. 간단히 언급만 해주고 본인이 한 내용만 설명해야 한다.
 - 이미 교과서나 다른 논문에 실린 내용의 설명이 필요하면 Reference로 해결한다.

4. Controlblock의 counter들이 다 0이 되면 ControlBlock을 delete하는데, 내가 참조하는 Controlblock이 delete되어 있다면 오동작이나 ABA문제가 생기지않는가?
 - shared_ptr::add_weak_copy() 에서 curr_ctr의 생사를 보장할 수 없다.
 - ctr이 가리키는 control block이 add_weak_copy()메소드의 호출기간 동안 delete되지 않도록 해야 한다.
   => 해결방법 EBR이나 Hazard Pointer사용
   => 참조 http://csng.cs.toronto.edu/publication_files/0000/0159/jpdc07.pdf
 - 더 깔끔한 해결책이 없는지 고민해보기

5. 다음 미팅
 - 8월 20일 목요일 1:30분
 - 논문 더 다듬어 오기


2020-08-20
-------------
1. 진행상황
 - ABA 문제 해결 필요

 while(true)
   a = make_shared<int>(i++);

-----------------
while(true)
   b = a;

 - 

		control_block<Tp>* add_shared_copy() const
		{
			control_block<Tp>* curr_ctr;
			control_block<Tp>* ret_ctr;

			do {
				curr_ctr = ctr;
				if (curr_ctr == nullptr)
					return nullptr;

				ret_ctr = curr_ctr->add_use_count();            // ret_ctr이 가리키는 control_block이 이미 delete되어 있을 수 있다.

			} while (ret_ctr == nullptr);

			return ret_ctr;
		}

--------------------------------------
control_block<Tp>* shared_ptr::add_shared_copy() const
{
    control_block<Tp>* curr_ctr;
    control_block<Tp>* ret_ctr;
    int ctc; 

     while(true)
    {	
        curr_ctr = ctr;

        if (curr_ctr == nullptr)	
	return nullptr;

        ctc = thread_count;	

        if( ctc == 0 )		
	 return nullptr;                   // 이러면 안된다.     이 객체가 nullptr가 된적이 없는데도 nullptr를 return할 수 있다.    continue를 해야지!!!
			
        if( true == CAS(thread_count, ctc, ctc + 1) )
            break;	
     }

    ret_ctr = curr_ctr->add_use_count(); // 이러면 안된다.     이 객체가 nullptr가 된적이 없는데도 nullptr를 return할 수 있다.    continue를 해야지!!!

    while(true)
    {
        ctc = thread_count;
        if( false == CAS(thread_count, ctc, ctc - 1) )
            continue;

        if(ctc == 1 && ret_ctr = nullptr)
        {
            delete curr_ctr;
	return nullptr;
        }

        else
            return ret_ctr;
    }
}


--------------------------------------------------------------------------------------------------------------
control_block<Tp>* shared_ptr::add_shared_copy() const
{
    control_block<Tp>* curr_ctr;
    control_block<Tp>* ret_ctr;
    int ctc; 

     while(true)
    {	
        curr_ctr = ctr;

        if (curr_ctr == nullptr)	
	return nullptr;

        ctc = thread_count;	
        if( ctc == 0 ) continue;
        if( true == CAS(thread_count, ctc, ctc + 1) ) {
            ret_ctr = curr_ctr->add_use_count();
            if (nullptr == ret_ctr) {
                 thread_count--;
                 continue;
            }
            break;	
       } 
     }

    while(true)
    {
        ctc = thread_count;
        if( false == CAS(thread_count, ctc, ctc - 1) )
            continue;

        if(ctc == 1)
        {
            delete curr_ctr;
	return nullptr;
        }

        else
            return ret_ctr;
    }
}

-----------------------------------------------
 수정해 볼것...


2. 다음미팅 
  8월 27일 목요일 1시 30분

2020-08-27
------------
1. Control Block을 링크드리스트로 관리한다. Circular List.
 - delete되는 컨트롤 블록을 링크드리스트에 저장한다.

2. Control Block에 stamp를 두고 재사용시 1씩 증가하게 해서 ABA문제를 없앤다.
 - Control Block은 Free List로 관리하면 된다.

3. 구현해 볼것.

4. 다음 주 수요일 9월 2일 오후 2시 30분에 Skype로 보자.
 - 졸업논문지원을 해줄 때 교수가 제출해야 지원 가능 (과사무실, 공저자? 제일저자?)

2020-09-02
--------------
1. 진행 상황
 - pred, curr 값을 통해서 ABA문제 해결
 - 모든 경우에 수에 대해 문제 없이 동작함을 보임.

2. 논문 리뷰
 - 비문들이 많은데 계속 수정 필요
 - 본문에서 설명 순서를 Top Down으로 바꿔야 한다. (shared_ptr -> control_block -> free list)
 - 중복되거나 중요하지 않은 코드는 GIT를 레퍼런스로 넘기는 좋다.

3. 다음 주 수요일 9월 9일 오후 2시 30분에 Skype로 보자.


2020-09-09
-------------
1. 논문 수정

2020-09-16
-------------
1. 논문 수정 (Ver .24)

2. 다음 미팅 10월 7일 오후 3:30분 학교에서.
 - 영어로 써오기


2020-10-13
-------------
1. 논문 투고 => 한국게임학회
 => 전면 수정 후 재투고
 => 문제는 게임학회에 어울리지 않는 논문이다.

2. 해결방법
 => 게임에 특화 -> shared_ptr가 게임에만 특화시킬 수 있는 것이 아니므로 곤란.
 => 다른 논문지에 투고 => 정보과학회, 한국인터넷방송통신학회 논문지, 한국멀티미이어 학회
    -> 문제 : 시간이 걸릴것 같다.

3. 지적 받은 사항을 수정할 것.

4. 관련 연구
1. Arthur Andrzejak, Felix Eichler and Mohammadreza Ghanvati, "Detection of memory leaks in C/C++", 9th International Workshop on Software Aging and Rejuvenation (WoSAR 2017)co-located with ISSRE 2017, 26 Oct, 2017.

FRC: a high-performance concurrent parallel deferred reference counter for C++ (ISMM2018)


  - 검색해 볼것
    https://ieeexplore.ieee.org/browse/conferences/topic?ranges=2016_2020_Year&pageNumber=10
    https://dl.acm.org/doi/10.1145/3210563.3210569

    비슷한 주제가 있을 것 같은 항목을 찾아서 제목들을 검색해 볼것.
    => 리스트를 뽑고 한번 읽어 볼것.

2020-10-19
------------
1. 다시 작성 중
 - 문제가 많다.
 - C++17언급은 매우 위험하다. <<C++11이면 모를까, 저자의 진실성을 의심케하는 선입관을 심어줄 수 있다.>>
 - ....

2. 학회
 - 한국인터넷방송통신학회를 목표

3. 다음 미팅
 - 10월 22일 목요일 오후 2:30


2020-10-22
------------
1. 다시 작성중
 - 수정해서 Ver10에 올림

2. 다음 미팅
 - 10월 28일 오후 2시 30분

2020-10-28
-------------
1. 다시 작성중
 - 수정해서 Ver15에 올림

2. 다음 미팅
 - 11월 4일 오후 2시 30분

2020-11-04
------------
1. 재작성 
 - 다시 게임학회에 제출하기로 함.
 - 내용 수정 (ver22)

2. 다음 미팅
 - 11월 9일 오후 4시 30분


2020-11-09
-------------
1. 논문 리뷰
 - 어색한 표현 수정
 - 3.2절은 다시 보면서 어색하거나 틀린 내용이 있으면 수정 할 것.
 - 11월 10일까지 제출

2. 다음 미팅
 - 11월 18일 수요일 오후 2시
 - 취업용 포트폴리오 작성. (서버 프로그래머)
   * 수업시간에 했던 텀프로젝트들 정리
   * 논문 내용 정리
 - 지금 공채를 하는 기업이 어디 있는지 알아볼 것. 친구들과 정보를 공유할 것.


2020-11-23
--------------
1. 논문 제출 : 11월 10일 제출
 - 심사 결과 기다리는 중, 아마 12월 초에 결과가 나올 듯
 - 논문이 게제가 되지 않으면???? 
2. 취업 : 알아 보고 있음.
 - 일단 대기업 자회사의 수시 채용을 노려볼 예정.
 - 꼭 게임회사만을 목표로 하는 것은 아니다.
3. 쿠팡 : 관심있으면 장지웅 교수님에게 연락.
  쿠팡에서 대규모 채용예정 입니다.
  서류 본교졸업생 우대 > 기술면접 (합격시 정규직 연봉 6000만원예상 or 2년 계약직 후 정규직 전환)
  관심 있는 졸업예정자는 이력서를 작성하여 jwchang@kpu.ac.kr 로 제출해 주세요.
  이메일 제목 : [쿠팡지원]학과_이름 으로 지원
  많은지원 바랍니다.
4. 포트폴리오
 - 최신 것이 맨 앞에 와야 한다.
 - 업데이트 (역시 내용보다 작문실력이 문제임...)
5. 다음 미팅
 - 12월 2일 2시 30분
 - 포트폴리오 완성
 - 취업 알아보기
 - 종합설계 보고서 제출

2020-12-02
-------------
1. 논문 : 심사중

2. 취업 : 크래프톤 지원 예정 (수시 채용)
 - 서버 프로그래머 지향.

3. 포트폴리오
 - 수정했는데 올리지 않음.

4. 종합설계 보고서 
 - 작성

5. 다음 미팅
 - 12월 16일 오후 2시 30분
 - 포트폴리오 업로드 할 것.
 - 과제 수행 내용 전달 예정

2020-12-16
-------------
1. 논문 게제 진행 상황
 - 재심사
 - 친절하게 수정사항을 알려주었으니 시키는 대로 수정하면 된다.

2. 취업 : 
 - 포트폴리오 완성되는 대로

3. 포트폴리오
 - 아직 더 수정이 필요. (ALONE  DUNGEON은 실행되도록 수정하고 GIT 링크를 포트폴리오에 넣을 것)

4. 다음 미팅
 - 12월 30일 2시 30분
 - 수정된 논문과 포트폴리오를 가져 오도록.

2020-12-30
-------------
1. 종합설계2 성적
 - F

2. 논문 수정 사항
 - 수정 했음
 - 정리 해서 제출
 - Queue도 벤치마크에 넣어서 제출

3. 다음학기 스케줄 
 - 대기업 상반기 공채를 노려 볼것
   * 스케줄을 확인해 볼 것
   * 코딩 테스트의 비중이 점점 높아지고 있음. 준비 할 것
 - 빨리 논문을 출판해서 포트폴리오에 넣을 것

4. 다음 미팅
 - 1월 13일 
 - 논문 수정 제출
 - 포트폴리오 리뷰


2020-01-13
------------
1. 논문 수정 제출
 - 수정해서 제출 함
 - 결과를 기다리는 중
 - 채택되면 게제비를 내고 영수증을 복사해서 지도교수에게 제출 <= 지원 가능

2. 포트폴리오
 - OpenGl로 작성한 간단한 3D 게임이 있는데 추가해야 함
  * 회사에서는 서버프로그래머라도 클라이언트 프로그래밍 경험이 있으면 우대 사항임
 - MMORPG 포트폴리오
  * 장수가 너무 많다 -> 하지만 가볍게 읽을 수 있어서 오히러 +가 될수도 있겠다.
   - 하지만 장수제한이 있는 회사를 고려해서 압축 포트폴리오도 따로 만들어야 한다.

3. 취업 활동
 - 대기업 전반기 채용이 4월-5월로 보인다.

4. 취업할 떄 까지 프로젝트 참여 가능

5. 다음 미팅
 - 1월 26일 화요일 오전 11시 30분 SKYPE로 하자.
 - 포트폴리오 작성해 오기

2020-01-26
-------------
1. 논문 제출한것 아직 결과가 나오지 않음

2. 포트폴리오
 - 많은 수정이 필요함 (근본적으로 MO의 게임 시스템을 MMO에 넣었는데, 성능에 문제가 생김) 
 - 더미 클라이언트를 사용한 성능 측정은 필수
 - 논문하고, 3D게임 추가

3. 다음 미팅
 - 2월 9일 화요일 오전 11시 30분 SKYPE

2021-02-09
-------------
1. 논문 제출
 - 게제 가능 -> 최종 논문 제출 -> 2월 말 게제
  * 2월 중순 게재비 지불 -> 논문 프린트 본 전달 -> 지도교수 제출 -> 게제비 전달 (학교 논문장려금) -> 구태균 전달

2. 취업 집중
 - 포트폴리오
  * 논문 내용 추가 => 논문 내용이 20페이지 너무 많다. => 압축 필요
  * MO 스타일로 되어 있는 것을 MMO로 바꿀 것

3. MMO관련
 - Object에 Viewlist를 넣지 않기
  * 몬스터가 이동했을 때 Sector의 모든 클라이언트의 viewlist lock해야 하는 오버헤드가 있지 않은가? -> 어차피 viewlist가 있어도 lock을 해야 한다.
  * (제대로된 질문) 몬스터에게 viewlist가 없으면 oldviewlist를 만들기 위해서 sector scan을 추가로 해야 한다. viewlist가 있으면 oldviewlist를 위한 scan은 필요없지 않은가?
    - 이경우 모든 몬스터가 viewlist를 가지게 되므로 추가 lock/unlock 오버헤드의 증가가 sector scan한번 추가 보다 크다.
    - 한번 비교를 해볼 것
 
4. 다음 미팅
 - 2월 23일 화요일 오후 1시 30분 
  * 논문 전달
  * 과제 전달
  * 포트폴리오 수정 (2월 까지 완료 해야 함)

2021-02-23
------------
1. 논문 제출
 - 게제 가능 -> 최종 논문 제출 -> 2월 말 게제
  * 2월 중순 게재비 지불 -> 논문 프린트 본 전달 -> 지도교수 제출 -> 게제비 전달 (학교 논문장려금) -> 구태균 전달

2. 포트폴리오
 - 너무 전문적인 내용이 자세히 나온다, 좀더 이해하기 쉽도록 개략적으로 설명할 것. 어차피 GIT과 논문 URL이 있으니 더 자세한 내용은 논문을 보라고 하면 됨.

3. NDC 발표 자료 작성
 - 도입부의 설명이 부족하고
 - 설명을 위한 예제 프로그램이 많이 추가되어야 하며 (말이나 문장으로 설명하면 안되고, 그림이나 샘플 소스코드를 최대한 사용해야 한다.)
 - shared_ptr 구현이 너무 분량이 많고 자세하다. (자세한 구현은 git이나 논문을 보라고 하면 되고, 중요한 것은 사용법과 성능)

4. 다음 미팅
 - 3월 9일 화요일 오전 11시 30분
 - 포트폴리오

2021-03-09
--------------
1. 논문 종이본 제출 필요

2. NDC제출 -> 심사중

3. 포트폴리오
 - 여러 군데 수정이 필요 포트폴리오 ver 15에 수정

4. 다음 미팅
 - 3월 23일 화요일 오후 1시 30분
 - 논문 인쇄본 가지고 오기.


2021-03-23
-------------
1. 종이논문 전달받음 -> 학교 시스템에 등록함.
 - 4월 20일경에 논문장려금이 지급되면 게제비 28만원 지원 예정

2. NDC제출 -> 확정되는 것은 5월 예정

3. 포트폴리오
 - MMORPG 포트폴리오가 장수가 너무 많다. ->5 장 정도로 줄일것
 - 작성한 문서가 아까우니 별도의 프로그램 설명서 문서로 만들고, 포트폴리오에서 URL을 통해 받아 볼 수 있도록 할 것.
 - 이동은 패킷을 수신했을 때 즉시 처리, timer_thread로 빙빙 돌리지 말것
 - 여러군데 수정 필요 ver16에 수정

4. 다음 미팅
 - 4월 6일 오전 11시 30분 Skype

2021-04-06
-------------
1. NDC 탈락

2. 포트폴리오 정리

3. 취업 알아보기 : 물들어올 때 노를 저어야 하므로, 부지런히 알아보기, 공채시즌은 아닌에, 팀별 모집이 있을 테니 알아보도록.

4. 다음 미팅
 - MMO서버에서 LFSP 어떻게든 사용해서 긍정적인 결과를 얻어오도록.
 - 과제 수행, 논문게제비 정리
 - 4월 20일 11시 30분 SKYPE

2021-04-21
-------------
1. 취업 알아보기
 - 포트폴리오 완성에 2개월이 흐르고 있는데, 이렇게 여유있게 고치고 있을 시간이 없음
 - 빨리 완성 해야함. => 물어보고 작성하는 것이 아니라, 일단 작성한 후에 수정을 받아야 함.

2. 포트폴리오 수정
 - Fruit Crush 리뷰
 - 논문 후기 수정
 - 질문이 왔을 때 빨리 빨리 답을 할 수 있도록 연습
 - 게임 플레이 동영상 유튜브에 올리고 링크 추가

3. 응모 
 - 넥슨과 크래프톤이 있는데 빨리 응모하도록.
 - 이번 주

4. 다음 미팅
 - 취업 응모 결과를 알려 줄것
 - 5월 4일 11시 30분 SKYPE
 - 과제 수행 
 - 논문 게제비 (계정을 문자로 전송, 28만원)

2021-05-11
-------------
1. 취업
 - 웹젠, NCSoft, 크래프톤
  * 서류 제출, 크래프톤은 금요일에 연락이 올 예정
 - 펄어비스 지원 하자.
2. 포트폴리오 제출
 - 
3. 면접 준비
 - 포트폴리오에 대해서 질문이 오면 즉시 대답할 준비
 - 손코딩 연습
 - https://www.youtube.com/watch?v=4fUJsdF0QZQ  (NCSoft 박일 "프로그래머로서 취업 대비할 때 주의할 점"
4. 다음 미팅
 - 5월 25일 오전 11시 30분 SKYPE
 
2021-05-28
-------------
1. 취업
 - 웹젠 : 결과가 나오지 않음
 - 크래프톤, NCSoft 탈락
  * 크래프톤 : 코딩테스트에서 탈락,,  문제는 쉬웠는데 하나를 풀지 못함,   다풀어놓고 성능개선을 위해서 최적화를 하다가 시간을 넘김.
  * NCSoft는 인성테스트에서 탈락.
 - 다른 회사? 스마일 게이트 (내일 코딩 테스트)
 - 쿠팡 코딩테스트 탈락
 - 넥슨 수시 지원 예정

2. 다음 미팅
 - 6월 8일 오전 11:30분 스카이프


